priority -50

###########################################################################
#                            TEXTMATE SNIPPETS                            #
###########################################################################
snippet file "file" b
from tqdm import tqdm
with open(${1:afile}, '${2:r}', encoding='utf-8') as ${3:f}:
	lines = f.readlines()
	for line in tqdm(lines):
		${4:pass}
endsnippet

snippet wfile "file" b
from tqdm import tqdm
with open(${1:afile}, 'r', encoding='utf-8') as f,\
	open(${2:outfile}, 'w') as wf:
	lines = f.readlines()
	for line in tqdm(lines):
		wf.write(line)
endsnippet

snippet rezh "re zh"
r'\u4e00-\u9fa5'
endsnippet

snippet init "init function"
	def __init__(self):
endsnippet

snippet head "python header" b 
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author : jackiexiao
# @License : ${1:MIT}, see LICENSE for more details.
# @Copyright: (c) `!v strftime('%Y')` by ${2:jackiexiao}.
# @Time : ${3: `!v strftime("%Y-%m-%d %H:%M")`}
# @Description :
endsnippet

snippet import "import freq use module" b
import re
import os
import sys
from pathlib import Path
from tqdm import tqdm

import pandas as pd
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
endsnippet

snippet argparse "main argparse" b
if __name__ == "__main__":
	import argparse
	parser = argparse.ArgumentParser()
	parser.add_argument('infile', type=str)
	parser.add_argument('outfile', type=str)
	#parser.add_argument("-m", "--max_num", default=20, type=int)
	#parser.add_argument("-d", "--with_digit", default=False, action="store_true", help="带调音节覆盖")
	args = parser.parse_args()

	main(args)
endsnippet

snippet logger "set logger function" b
import logging

def get_logger(logname='Main',
		logfilename='main.log',
		logfile=True,
		console=True,
		logfile_level='DEBUG',
		console_level='INFO'):
	"""设置logger，默认同时添加文件输出和控制台输出"""
	logger = logging.getLogger(logname)
	logger.setLevel('DEBUG')

	formatter = logging.Formatter(
		fmt=('[PID:%(process)d]%(asctime)s.%(msecs)03d %(filename)s'
			'[line:%(lineno)d] '
			'%(levelname)s %(message)s'),
			datefmt='%Y-%m-%d %H:%M:%S',
		)

	if logfile:
		# 添加文件输出
		file_handler = logging.FileHandler(logfilename, 'w', 'utf-8')
		file_handler.setFormatter(formatter)
		file_handler.setLevel(logfile_level)
		logger.addHandler(file_handler)

	if console:
		#  添加控制台输出
		stream_handler = logging.StreamHandler()
		stream_handler.setFormatter(formatter)
		stream_handler.setLevel(console_level)
		logger.addHandler(stream_handler)

	return logger
endsnippet
